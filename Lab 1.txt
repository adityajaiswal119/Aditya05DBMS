                                  Lab 1

                            Introduction to DBMS
Database Management Systems (DBMS) are software systems used to store, retrieve, and run queries on data. A DBMS serves as an interface between an end-user and a database, allowing users to create, read, update, and delete data in the database.

DBMS manage the data, the database engine, and the database schema, allowing for data to be manipulated or extracted by users and other programs. This helps provide data security, data integrity, concurrency, and uniform data administration procedures.


                                Examples of DBMS
There is a wide range of database software solutions, including both enterprise and open source solutions, available for database management.

Here are some of the most popular database management systems:

                                     Oracle
Oracle Database is a commercial relational database management system. It utilizes enterprise-scale database technology with a robust set of features right out of the box. It can be stored in the cloud or on-premises.

                                      MySQL
MySQL is a relational database management system that is commonly used with open-source content management systems and large platforms like Facebook, Twitter, and Youtube.


                                    SQL Server
Developed by Microsoft, SQL Server is a relational database management system built on top of structured query language (SQL), a standardized programming language that allows database administrators to manage databases and query data.


                 What is a Relational Database (RDBMS)?
A relational database is a type of database that stores and provides access to data points that are related to one another. Relational databases are based on the relational model, an intuitive, straightforward way of representing data in tables. In a relational database, each row in the table is a record with a unique ID called the key. The columns of the table hold attributes of the data, and each record usually has a value for each attribute, making it easy to establish the relationships among data points.

                     ACID properties and RDBMS
Four crucial properties define relational database transactions: atomicity, consistency, isolation, and durabilityâ€”typically referred to as ACID.

Atomicity defines all the elements that make up a complete database transaction.
Consistency defines the rules for maintaining data points in a correct state after a transaction.
Isolation keeps the effect of a transaction invisible to others until it is committed, to avoid confusion.
Durability ensures that data changes become permanent once the transaction is committed.

                 Difference between DBMS and RDMS
DBMS (Database Management System) and RDBMS (Relational Database Management System) are both systems used for managing databases, but there are some key differences between the two:

Data Structure:
DBMS: DBMS can manage any type of data, whether structured, semi-structured, or unstructured. It doesn't necessarily enforce a structure or relationships between data.

RDBMS: RDBMS specifically deals with structured data and enforces a tabular structure where data is stored in tables with rows and columns. It also enforces relationships between these tables through the use of foreign keys.
Data Integrity:

DBMS: DBMS may or may not enforce data integrity constraints. It's up to the application to ensure the consistency and integrity of the data.

RDBMS: RDBMS enforces ACID (Atomicity, Consistency, Isolation, Durability) properties, ensuring data integrity through features like primary keys, foreign keys, constraints, and transactions.
Query Language:

DBMS: DBMS typically supports a general-purpose query language but may not necessarily support SQL (Structured Query Language).

RDBMS: RDBMS almost always supports SQL, which is a standardized language for managing relational databases.

Scalability:
DBMS: DBMS may have limitations in terms of scalability, especially when dealing with large volumes of data or complex relationships.

RDBMS: RDBMS is generally more scalable than plain DBMS due to its ability to handle structured data efficiently, support for indexing, and optimization techniques.


Normalization:
DBMS: DBMS may or may not support normalization, the process of organizing data to minimize redundancy and dependency.

RDBMS: RDBMS is designed to support normalization up to a certain level (typically up to 3rd normal form). This helps in reducing data redundancy and ensuring data consistency.


                what is SQL and it's Introduction
SQL (Structured Query Language) is a powerful and widely-used programming language designed for managing and manipulating relational databases. It serves as the standard language for communicating with and extracting information from databases. SQL enables users to perform a variety of operations, including data retrieval, insertion, updating, and deletion, as well as the definition and modification of database schema and access control.

Introduced in the 1970s by IBM researchers, SQL has since become an integral part of database management systems (DBMS) across various platforms, including commercial and open-source databases such as Oracle, MySQL, PostgreSQL, Microsoft SQL Server, and SQLite.

Here's a brief overview of SQL's key features and functionalities:

Data Querying: SQL allows users to retrieve data from databases using the SELECT statement. Users can specify criteria, such as filtering rows based on certain conditions, sorting data, and aggregating values using functions like SUM, COUNT, AVG, and others.

Data Manipulation: SQL provides commands for manipulating data within tables. These include INSERT for adding new records, UPDATE for modifying existing records, and DELETE for removing records. Users can also perform bulk data modifications using the INSERT INTO...SELECT statement.

Data Definition: SQL enables users to define and modify the structure of databases and their components. This includes creating and altering tables, defining constraints (e.g., primary keys, foreign keys, unique constraints), and creating indexes to improve query performance.

Data Control: SQL provides mechanisms for managing access to database objects and controlling user privileges. This includes granting and revoking permissions on tables, views, and other database objects, ensuring data security and integrity.

Transaction Control: SQL supports transactions, which allow users to group multiple database operations into logical units of work. Transactions ensure data consistency by providing features like ACID (Atomicity, Consistency, Isolation, Durability) properties, allowing users to commit or roll back changes as needed.

Data Definition Language (DDL) vs. Data Manipulation Language (DML): SQL is divided into two main categories: DDL and DML. DDL is used to define database structures, such as tables and indexes, while DML is used to manipulate data within those structures.
  

               Different data types used in SQL
SQL supports various data types to represent different kinds of data that can be stored in a database. The specific data types available may vary slightly between different database management systems (DBMS), but there are common data types that are widely supported across most SQL implementations. Here's a list of some common data types:

Numeric Types:
INTEGER: Represents whole numbers, typically in the range -2^31 to 2^31-1 or -2^63 to 2^63-1, depending on the platform.
FLOAT: Represents floating-point numbers with single precision.
DOUBLE: Represents floating-point numbers with double precision.
DECIMAL/NUMERIC: Represents fixed-point numbers with a specified precision and scale.
Character String Types:

CHAR(n): Fixed-length character string with a specified maximum length 'n'.
VARCHAR(n): Variable-length character string with a maximum length 'n'.
TEXT: Variable-length character string with no specified maximum length (often used for large text data).
Date and Time Types:

DATE: Represents a date value (year, month, day).
TIME: Represents a time value (hour, minute, second).
DATETIME: Represents a combination of date and time.
TIMESTAMP: Represents a specific point in time, typically used for recording when a row was last modified.
Boolean Type:

BOOLEAN: Represents a Boolean value, typically 'TRUE' or 'FALSE'.
Binary Data Types:

BINARY: Fixed-length binary data with a specified length.
VARBINARY: Variable-length binary data with a specified maximum length.
Other Data Types:

ARRAY: Represents an array of values of a specific data type.
JSON: Represents JSON (JavaScript Object Notation) data.
XML: Represents XML (eXtensible Markup Language) data.
GEOMETRY/GEOGRAPHY: Represents spatial data types for storing geometric or geographic data.



